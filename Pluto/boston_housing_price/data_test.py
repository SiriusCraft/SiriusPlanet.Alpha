"""
__________________________________________________________________________
The line equation is y = 111.72054000090864x+13245.313280718983
The root mean square error of this linear regression is 28391.129545437307
__________________________________________________________________________
The nv vs price linear regression coefs are [  1.46985137e+01   5.95024808e-01   4.11508486e+02   3.11612563e+01
   1.68814193e+14   1.68814193e+14   1.68814193e+14  -1.68814193e+14
   2.07791878e+13   2.07791878e+13   2.07791878e+13  -2.07791878e+13
   2.49009238e+01   9.64037353e+00   3.71342862e-01  -6.16760497e+00
   2.50458623e+01   3.55963618e+01   2.46057514e+02   5.99700435e+03
   8.70438309e+03   2.98425997e+04   1.24533763e+04   8.97074380e+02
   1.13009607e+04  -2.89678041e+04   3.24648080e+03   5.77197085e+03
   6.15789793e+17   2.38281178e+03  -8.54798473e+03   4.36315435e+03
   1.61557108e+04   6.68632800e+17   2.55005226e+17   2.55005226e+17
   2.55005226e+17   2.55005226e+17   2.55005226e+17   2.55005226e+17
  -1.43674118e+18  -1.43674118e+18  -6.65933452e+16  -6.65933452e+16
  -6.65933452e+16  -3.46773344e+16  -3.46773344e+16  -3.46773344e+16
  -3.46773344e+16   2.91537085e+17   2.91537085e+17   2.91537085e+17
   2.91537085e+17   1.43744423e+18   1.43744423e+18   1.43744423e+18
   1.71997650e+17   1.71997650e+17   1.71997650e+17   1.71997650e+17
   1.71997650e+17  -3.45069616e+17  -3.45069616e+17  -3.45069616e+17
   3.89926250e+16   3.89926250e+16   3.89926250e+16   3.89926250e+16
   3.89926250e+16   3.89926250e+16   3.89926250e+16   3.89926250e+16
   3.89926250e+16   3.89926250e+16   3.89926250e+16   3.89926250e+16
  -4.90382282e+18   3.89926250e+16   3.89926250e+16   3.89926250e+16
   3.89926250e+16   3.89926250e+16   3.89926250e+16   3.89926250e+16
   3.89926250e+16   3.89926250e+16   3.89926250e+16   3.89926250e+16
   3.89926250e+16   3.89926250e+16   3.89926250e+16   3.89926250e+16
   2.05247177e+17   2.05247177e+17   2.05247177e+17   2.05247177e+17
   2.05247177e+17   2.05247177e+17   2.05247177e+17   2.05247177e+17
   2.05247177e+17   8.21994191e+17   8.21994191e+17   8.21994191e+17
   8.21994191e+17   8.21994191e+17   8.21994191e+17   8.21994191e+17
   8.21994191e+17   5.64988910e+17   5.64988910e+17   5.64988910e+17
  -5.08008826e+16   5.64988910e+17   3.31126567e+17   3.31126567e+17
   3.31126567e+17   3.31126567e+17   3.31126567e+17   3.31126567e+17
   3.31126567e+17   3.31126567e+17  -9.96388675e+02  -1.05361104e+02
   1.73962731e+03  -7.44215080e+02  -1.50659712e+03   4.78977462e+02
   7.67869812e+03   1.84756121e+04   4.30622033e+04   8.49678289e+04
   1.16183186e+17   1.16183186e+17   1.16183186e+17   1.16183186e+17
   1.16183186e+17   1.16183186e+17   1.16183186e+17   1.16183186e+17
   1.16183186e+17   2.38571037e+17   2.38571037e+17   2.38571037e+17
   2.38571037e+17   2.38571037e+17   2.38571037e+17   7.05986215e+17
   7.05986215e+17   7.05986215e+17   7.05986215e+17   7.05986215e+17
  -1.14190867e+18   7.05986215e+17   7.05986215e+17   4.44590658e+18
  -2.08734086e+17  -2.08734086e+17  -2.08734086e+17  -2.08734086e+17
  -2.08734086e+17  -2.08734086e+17  -2.08734086e+17  -2.08734086e+17
  -2.08734086e+17  -2.08734086e+17  -2.08734086e+17  -2.08734086e+17
  -2.61354804e+18  -2.81124279e+17  -2.08734086e+17  -5.65634467e+18
  -7.09808120e+18  -4.89328932e+16  -4.89328932e+16  -4.89328932e+16
  -4.89328932e+16  -4.89328932e+16  -4.89328932e+16  -4.89328932e+16
  -4.89328932e+16  -4.89328932e+16  -4.89328932e+16  -4.89328932e+16
  -4.89328932e+16  -4.89328932e+16  -4.89328932e+16  -4.89328932e+16
   2.34573001e+16  -4.89328932e+16   1.52999982e+18   6.50306119e+15
   6.50306119e+15   6.50306119e+15   6.50306119e+15   6.50306119e+15
   3.84169449e+18  -1.58457756e+18   3.42830943e+17   3.42830943e+17
   3.42830943e+17   3.42830943e+17   1.08499451e+18  -6.02346403e+17
  -6.02346403e+17  -6.02346403e+17  -6.02346403e+17  -6.02346403e+17
   3.01050910e+18  -4.64901133e+17  -4.64901133e+17  -4.64901133e+17
  -4.64901133e+17  -4.64901133e+17  -4.64901133e+17  -4.10458572e+18
   4.67683588e+17   4.67683588e+17   4.67683588e+17  -7.38073451e+17
   4.67683588e+17  -5.93510069e+17   4.67683588e+17  -1.04228521e+19
  -6.23153661e+17  -6.23153661e+17   4.58866670e+16  -6.23153661e+17
  -6.23153661e+17  -6.23153661e+17  -1.98863943e+18   2.22723061e+18
   3.16257456e+17   3.16257456e+17   3.16257456e+17   3.16257456e+17
   3.16257456e+17  -1.76335376e+17   4.46659525e+17  -1.57649484e+16
  -1.57649484e+16  -1.57649484e+16  -1.57649484e+16  -1.57649484e+16
  -1.57649484e+16   1.05989741e+17  -1.32816850e+17   6.00635881e+15
   1.30862040e+17   1.30862040e+17   1.30862040e+17   1.30862040e+17
   1.03841689e+18   1.30862040e+17   1.30862040e+17   2.67459337e+18
  -1.84352983e+17  -1.03129990e+18  -1.03129990e+18  -1.03129990e+18
  -1.03129990e+18  -7.01398399e+17  -7.42837563e+17   2.68899255e+18
  -2.80088732e+17  -2.80088732e+17  -2.80088732e+17  -2.80088732e+17
  -2.80088732e+17   3.07740279e+17  -1.21383843e+17  -1.21383843e+17
  -1.42047412e+18   1.78665543e+17   1.78665543e+17   1.78665543e+17
   1.78665543e+17   1.78665543e+17   3.88947458e+18  -2.09420512e+18
   8.26499666e+16   8.26499666e+16   8.26499666e+16   8.26499666e+16
   8.26499666e+16   2.16661864e+18   2.46482603e+17   2.46482603e+17
   2.46482603e+17   2.46482603e+17   2.46482603e+17   2.46482603e+17
   2.46482603e+17   2.12686699e+18   8.84720074e+17   3.89956692e+16
   1.41503981e+16   3.89956692e+16   3.89956692e+16   3.89956692e+16
   3.89956692e+16   1.11236274e+18  -5.99005001e+16  -5.99005001e+16
  -5.99005001e+16  -5.99005001e+16   8.11974119e+16  -5.99005001e+16
  -5.99005001e+16   8.01184107e+17   1.63063554e+17   1.63063554e+17
   1.63063554e+17  -3.63643370e+17  -1.17524198e+18  -9.23722060e+17
  -6.68802628e+17  -6.58759734e+17  -6.68802628e+17  -6.68802628e+17
  -6.68802628e+17  -6.68802628e+17  -2.23485643e+18  -2.10464208e+03
  -3.41733457e+17   1.85345076e+17  -3.41733457e+17  -3.41733457e+17
  -3.41733457e+17  -3.41733457e+17   2.71413829e+18  -1.95373275e+03
  -1.17033196e+17  -1.17033196e+17  -1.17033196e+17   2.56057550e+03
  -5.52798396e+17  -5.52798396e+17  -5.52798396e+17  -5.52798396e+17
  -5.52798396e+17  -2.66703912e+01   8.04696970e+16   8.04696970e+16
   8.04696970e+16   8.04696970e+16   8.04696970e+16  -5.01689424e-02
  -3.01917167e+17  -3.01917167e+17  -3.01917167e+17  -3.01917167e+17
  -3.01917167e+17  -3.01917167e+17  -3.01917167e+17  -3.01917167e+17
  -3.01917167e+17   1.52475438e-08  -3.05246773e-09   8.49698790e+16
   8.49698790e+16   8.49698790e+16   8.49698790e+16   8.49698790e+16
   8.49698790e+16  -9.38839488e+16   5.76284663e+16   5.76284663e+16
   5.76284663e+16   5.76284663e+16   5.76284663e+16   1.74147668e+16
  -7.43050433e+15  -7.43050433e+15  -7.43050434e+15   2.39189120e-23
   1.30484366e+17   1.30484366e+17   1.30484366e+17   1.30484366e+17
  -1.42780096e+17  -1.42780096e+17  -1.42780096e+17   1.46353603e+17
   1.46353603e+17   1.46353603e+17   1.46353603e+17   1.46353603e+17
   1.55700815e+17   1.55700815e+17   1.55700815e+17  -1.23398882e+17
  -1.23398882e+17  -1.23398882e+17  -1.23398882e+17  -1.23398882e+17
  -1.23398882e+17  -1.23398882e+17  -2.07588750e-52   1.26457796e-54
  -9.69259574e+16  -9.69259574e+16  -9.69259574e+16  -9.69259574e+16
  -8.55340648e-64  -2.27539421e-66  -7.72748611e+16  -7.72748611e+16
  -7.72748611e+16  -7.72748611e+16  -7.72748611e+16  -7.72748611e+16
  -7.72748611e+16  -7.72748611e+16  -7.72748611e+16  -7.72748611e+16
  -7.72748611e+16  -7.72748611e+16   0.00000000e+00  -7.72748611e+16] and inter is -3.89926249973932e+16
The root mean square error of this linear regression is 3.331730944688937e+16
__________________________________________________________________________
For Lasso

[12053.027024110041, 12255.770673370662, 12498.568846353262, 12754.575398194107, 13025.883025061426, 13289.589564052552, 13573.614451980837, 13882.103642113541, 14198.628834454456, 14548.047240655203, 14907.993772220727, 15273.74280288213, 15623.071041810006, 15970.248601445981, 16324.028436578523, 16673.450899015199, 17043.025956452573, 17419.716899702056, 17787.422750299502, 18170.819345258897, 18560.006258334171, 18946.8982073019, 19341.900355299178, 19735.171838066803, 20150.916617412906, 20570.170639829157, 20992.846340271622, 21418.774883373651, 21847.81322164055, 22279.856137717699, 22714.432171523484, 23148.598364018035, 23582.460856457899, 24001.289075419638, 24440.55172578655, 24881.124928157697, 25308.080530742587, 25754.108813789604, 26202.200116236971, 26651.063699006576, 27101.493466954358, 27553.578751428355, 28007.434630261589, 28468.527425483182, 28928.549846327307, 29368.89484138192, 29784.46307263683, 30200.873953556464, 30618.253888718191, 31036.629187334493, 31455.805662705348, 31877.520207321595, 32300.080507314786, 32722.720711424157, 33146.019825264935, 33570.127201151401, 33994.910575700407, 34420.31949581291, 34846.630061411568, 35273.942970677148, 35678.648446045132, 36107.449339162806, 36534.163971794478, 36957.693209598088, 37381.726802150566, 37806.493067743082, 38257.030538854269, 38732.31181836054, 39208.197102794678, 39684.707257443944, 40161.808047246195, 40652.351877757821, 41136.328370336538, 41637.444604336422, 42146.7630925536, 42630.860063492946, 43141.023161124693, 43651.674541890643, 44162.793511620286, 44678.363814166412, 45225.298420615116, 45773.294597837034, 46298.110576777814, 46613.698329273386, 46851.904688941519, 47090.129539630558, 47328.359393426166, 47566.631704547326, 47804.972378455182, 48043.396787117628, 48281.885695628982, 48520.463996139326, 48760.119019442594, 48999.475119212279, 49236.61321100434, 49475.907411737804, 49719.521878938256, 49969.065071925092, 50218.639672074809, 50468.281708755305, 50717.984849261338, 50953.433907157938, 51182.270219396611, 51405.910685079609, 51628.637906945376, 51854.960751645565, 52083.760155585594, 52308.454105818273, 52530.33947875553, 52751.818300704363, 52973.131984284271, 53194.55211424765, 53416.063121528612, 53637.657785631134, 53859.33125135857, 54081.090940117065, 54302.923106102411, 54524.839566000352, 54746.836619263464, 54956.939110661035, 55073.310837657009, 55137.534009749499, 55174.167937580751, 55225.538533565777, 55286.260143730724, 55347.03630601021, 55407.858283330315, 55468.704067029023, 55529.579973328888, 55590.483724721176, 55651.406957219071, 55712.358007232011, 55773.335379171447, 55834.341474556335, 55891.063370180367, 55952.140478008892, 56013.245485028245, 56074.381288487246, 56135.545365282895, 56196.735958485027, 56257.981837315383, 56326.585632976283, 56420.544801167089, 56520.186571227554, 56620.132340244461, 56720.019374728494, 56819.862526812627, 56919.706985680634, 57019.575373930566, 57119.468729470544, 57219.38745468235, 57319.331439249268, 57419.298066078023, 57519.288084068532, 57619.300490622125, 57719.336038773537, 57819.395955803513, 57919.479883664069, 58019.587974395661, 58119.716491651649, 58219.867194650906, 58320.040863647242, 58420.237451539113, 58520.456695249137, 58620.697752945343, 58720.962085995081, 58821.313913749174, 58921.741307341545, 59020.267576750317, 59108.064571334085, 59194.756775845977, 59281.643428697367, 59368.828940443032, 59451.922602499792, 59537.456666255792, 59623.028581611055, 59708.618524961974, 59794.248146964725, 59877.41502213465, 59963.224567652949, 60049.070516248656, 60122.704870447997, 60191.818087999636, 60263.473295428623, 60335.118125638481, 60371.764580341049, 60398.057679643447, 60424.272210766198, 60450.468788478196, 60476.618909743789, 60502.759317199205, 60528.896027028066, 60555.03606019853, 60581.191760071342, 60607.359173611141, 60633.529669250107, 60659.71547763484, 60685.907010001232, 60712.104325356377, 60735.788919770697, 60762.032714441484, 60788.292001138674, 60814.566759794179, 60840.857176458783, 60867.163528056015, 60893.485291764002, 60919.818523419417, 60946.157531005912, 60972.542795329922, 60998.958338568504, 61025.409903765569, 61051.878245809654, 61078.373111603927, 61104.886516349892, 61131.408139428866, 61157.062696743036, 61181.367907678716, 61205.477565012116, 61229.60244384699, 61253.743551016858, 61277.901898340446, 61302.075308021762, 61326.271016154096, 61350.48844214619, 61374.72925462031, 61398.998249994482, 61429.445827541138, 61463.985753322282, 61498.543349112209, 61533.115594462164, 61567.701483094846, 61602.299651528658, 61636.911039407642, 61670.408719142099, 61705.038050895615, 61739.680854746824, 61774.337852111923, 61809.008043598886, 61843.690778325668, 61878.387077808504, 61913.096919242089, 61948.038665991822, 61983.170695755281, 62019.867342217702, 62058.011825976311, 62096.168940045369, 62134.337843142392, 62172.519778920978, 62210.714723384626, 62248.925043585215, 62287.138691872708, 62325.358247321659, 62363.590901359814, 62401.837103520396, 62440.096174437254, 62478.363202025001, 62516.633079112537, 62554.914281984456, 62592.512089094656, 62630.838122247354, 62669.171957373816, 62707.508850165083, 62745.854916950506, 62784.20419236063, 62822.567745571192, 62860.957621851543, 62899.396834705512, 62937.906342800474, 62973.340352886087, 63007.327940304385, 63041.287068885031, 63075.271149339758, 63109.267962503436, 63143.312334531402, 63177.372078272645, 63211.444412298712, 63245.534274258847, 63279.646697416545, 63313.762311516926, 63347.881157422948, 63382.012303179828, 63416.151597359072, 63450.981207108191, 63485.065052978644, 63523.8469974174, 63565.626805572952, 63603.002069631941, 63640.413787123347, 63677.80034679416, 63715.198487304056, 63752.608188272752, 63790.029429361195, 63827.462190272003, 63864.90645074904, 63902.362190577383, 63939.833816080834, 63980.829586146909, 64024.639894426153, 64068.531517225914, 64112.444201658465, 64156.361396469656, 64200.273935960766, 64244.184526231184, 64288.082882621027, 64331.989838819311, 64375.900721145867, 64419.810026315616, 64463.729226291769, 64507.65765230501, 64551.596453726459, 64595.543955740475, 64639.502397406461, 64683.482293801833, 64727.473987848854, 64771.475950468157, 64815.488160746216, 64859.511831270756, 64903.54593349505, 64947.589918625912, 64991.64196360729, 65035.704170169636, 65079.776544314424, 65123.859020776508, 65167.951579055036, 65212.054198699778, 65256.1655444848, 65300.286640278136, 65344.417736639465, 65388.558813320378, 65432.709850122628, 65476.870826898012, 65521.159785798227, 65565.34855094651, 65609.530540429609, 65653.680581982451, 65698.445261951754, 65756.162196294565, 65842.064208983968, 65927.988893403293, 66013.976917898137, 66099.975282633503, 66186.002736807801, 66272.086160033912, 66358.18048341079, 66444.284697280746, 66530.39876324276, 66616.534950957895, 66702.704669416038, 66788.91045450182, 66875.126125606475, 66961.351932395744, 67047.587369359215, 67133.832399386098, 67220.086985551869, 67306.361467649534, 67392.654547707527, 67478.95660523219, 67565.266217745986, 67651.585206551143, 67737.913891629229, 67824.254076337311, 67910.603530925771, 67996.962220079062, 68083.332171102506, 68169.715523563922, 68256.108006167822, 68342.509584289815, 68428.920223476467, 68515.339889444702, 68601.768548080727, 68688.206497175561, 68774.65344676876, 68861.109287697109, 68947.573986513205, 69034.047509933764, 69125.002382185456, 69211.452882945348, 69297.912106793447, 69384.38002112064, 69470.856593476696, 69557.341791569444, 69643.838664569252, 69730.346851304057, 69816.863567946144, 69903.388782823997, 69989.92246441968, 70076.464581368098, 70163.015102455523, 70249.573996619176, 70336.156014269858, 70422.744183605988, 70509.339739990915, 70595.943545966671, 70682.554975815481, 70769.167393776108, 70855.789494107536, 70942.419722516657, 71029.05804926352, 71115.704444750125, 71202.303587711911, 71288.887144474167, 71375.479578982588, 71452.828052530211, 71527.955087398921, 71603.06356498455, 71678.187148850775, 71753.318071835558, 71828.456295524637, 71903.601797030627, 71978.754553559498, 72053.914542410144, 72129.081740973837, 72209.048416185935, 72278.379145267827, 72340.479490768572, 72402.628771727963, 72464.784783769166, 72526.972104776883, 72589.220335378355, 72651.475245250054, 72713.736817236248, 72776.005034238231, 72838.315283304924, 72900.637054479856, 72962.965420153487, 73025.300363440168, 73087.657338149482, 73150.022871139925, 73212.394932176772, 73274.776803508968, 73337.166315917217, 73399.563501856668, 73466.773403309679, 73525.4081705797, 73595.34662366705, 73665.816947028201, 73736.323053145403, 73806.911747364211, 73877.502695398158, 73948.099523026191, 74021.372177877245, 74091.948083615905, 74162.576783759752, 74233.211793485694, 74303.852117795555, 74374.498734777517, 74445.151626516832, 74515.813188144515, 74586.573067611578, 74657.33917082171, 74728.111480093736]
__________________________________________________________________________


"""
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn import linear_model
from sklearn.metrics import mean_squared_error


class bostonHousingPrice:
    TRAIN_DATA_SHEET_NAME = 'one_hot_train'
    VALIDATION_DATA_SHEET_NAME = 'vali_onehot'
    TEST_DATA_SHEET_NAME = 'test_onehot'
    DATASET_PATH = '/Users/SiriusR/Documents/Pluto/data.xlsx'

    def __init__(self):
        self.data_train = pd.read_excel(self.DATASET_PATH, sheetname=self.TRAIN_DATA_SHEET_NAME)
        self.data_validation = pd.read_excel(self.DATASET_PATH, sheetname=self.VALIDATION_DATA_SHEET_NAME)
        self.data_test = pd.read_excel(self.DATASET_PATH, sheetname=self.TEST_DATA_SHEET_NAME)
        self.data_train[np.isnan(self.data_train)] = 0
        self.data_validation[np.isnan(self.data_validation)] = 0
        self.data_test[np.isnan(self.data_test)] = 0
        self.numerical_variables = ['Lot Area', 'Lot Frontage', 'Year Built',
                                    'Mas Vnr Area', 'BsmtFin SF 1', 'BsmtFin SF 2',
                                    'Bsmt Unf SF', 'Total Bsmt SF', '1st Flr SF',
                                    '2nd Flr SF', 'Low Qual Fin SF', 'Gr Liv Area',
                                    'Garage Area', 'Wood Deck SF', 'Open Porch SF',
                                    'Enclosed Porch', '3Ssn Porch', 'Screen Porch',
                                    'Pool Area']

        self.disceret_variables = ['MS SubClass', 'MS Zoning', 'Street',
                                   'Alley', 'Lot Shape', 'Land Contour',
                                   'Utilities', 'Lot Config', 'Land Slope',
                                   'Neighborhood', 'Condition 1', 'Condition 2',
                                   'Bldg Type', 'House Style', 'Overall Qual',
                                   'Overall Cond', 'Roof Style', 'Roof Matl', 'Exterior 1st', 'Exterior 2nd',
                                   'Mas Vnr Type',
                                   'Exter Qual', 'Exter Cond', 'Foundation',
                                   'Bsmt Qual', 'Bsmt Cond', 'Bsmt Exposure',
                                   'BsmtFin Type 1', 'Heating', 'Heating QC',
                                   'Central Air', 'Electrical', 'Bsmt Full Bath',
                                   'Bsmt Half Bath', 'Full Bath', 'Half Bath',
                                   'Bedroom AbvGr', 'Kitchen AbvGr', 'Kitchen Qual',
                                   'TotRms AbvGrd', 'Functional', 'Fireplaces',
                                   'Fireplace Qu', 'Garage Type', 'Garage Cars',
                                   'Garage Qual', 'Garage Cond', 'Paved Drive',
                                   'Pool QC', 'Fence', 'Sale Type', 'Sale Condition']
        self.gla_train = self.data_train['Gr Liv Area']
        self.sales_price_train = self.data_train['SalePrice']
        self.gla_validation = self.data_validation['Gr Liv Area']
        self.gla_test = self.data_test['Gr Liv Area']
        self.sales_price_validation = self.data_validation['SalePrice']
        self.test_sp = self.data_test['SalePrice']

    def check_unique(self):
        column_list = []
        for column_name in self.disceret_variables:
            cs = set(self.data_train[column_name].unique())
            column_list.append(cs)
        for i in column_list:
            print(i)

    def scatter_gla_price(self):
        plt.scatter(self.gla_train, self.sales_price_train, color='black')

    def replace_with_zeros(self, column_name, data):
        current = data[column_name]
        if column_name in self.numerical_variables:
            current[np.isnan(current)] = 0
            return current
        if column_name in self.disceret_variables:
            pass

    def linear_regression_gla_price(self):
        regression_gla_price = linear_model.LinearRegression(normalize=True)
        lr_gla_train = self.gla_train.values.reshape(self.gla_train.size, 1)
        lr_sales_price_train = self.sales_price_train.values.reshape(self.sales_price_train.size, 1)
        lr_gla_vali = self.gla_validation.values.reshape(self.gla_validation.size, 1)
        lr_sales_price_vali = self.sales_price_validation.values.reshape(self.sales_price_validation.size, 1)
        regression_gla_price.fit(lr_gla_train, lr_sales_price_train)
        test_gla = self.gla_test.values.reshape(self.test_sp.size,1)
        test_sp = self.test_sp.reshape(self.test_sp.size,1)
        # print('The line equation is y = {0}x+{1}'.format(regression_gla_price.coef_.item(),
        #                                                  regression_gla_price.intercept_.item()))
        plt.plot(lr_gla_train, regression_gla_price.predict(lr_gla_train), color='blue')
        mse = mean_squared_error(y_true=lr_sales_price_vali, y_pred=regression_gla_price.predict(lr_gla_vali))
        rmse = mse ** (0.5)
        # print('The root mean square error of this linear regression is {0}'.format(rmse))
        test_mse = mean_squared_error(y_true=test_sp, y_pred=regression_gla_price.predict(test_gla))
        test_rmse = test_mse ** (0.5)
        print('The root mean square error of the gla linear regression is {0}'.format(test_rmse))


    def plot_scatter_and_linear_regression(self):
        self.scatter_gla_price()
        self.linear_regression_gla_price()
        plt.axis([0, 6000, 0, 800000])
        plt.title('Gr Liv Area vs Sales Price')
        plt.xlabel('Gr Liv Area (square feet)')
        plt.ylabel('Sales Price (dollar)')
        plt.show()

    def normailize_numerical_variable(self):
        for name in self.numerical_variables:
            self.data_train[name] = self.normalize_data(name)
            self.data_validation[name] = self.normalize_data(name)
        print(self.data_train['Lot Area'])
        print(self.data_train['Lot Frontage'])

    def normalize_data(self, name):
        return (self.data_train[name] - self.data_train[name].mean()) / (
            self.data_train[name].max() - self.data_train[name].min())

    def get_numerical_var_index(self):
        numerical_variables_index = []
        for name in self.numerical_variables:
            nv_index = self.data_train.columns.get_loc(name)
            numerical_variables_index.append(nv_index)
        return numerical_variables_index

    def linear_regression_nv_price(self):
        linear_regression_nv_price = linear_model.LinearRegression(normalize=True)
        nv_index = self.get_numerical_var_index()
        nv_train = self.data_train.iloc[:, nv_index]
        sp_train = self.sales_price_train
        linear_regression_nv_price.fit(nv_train, sp_train)
        print(
            "The nv vs price linear regression coefs are {0} and inter is {1}".format(linear_regression_nv_price.coef_,
                                                                                      linear_regression_nv_price.intercept_))

    def linear_regression_all_price(self):
        linear_regression_all_price = linear_model.LinearRegression(normalize=True)
        all_train = self.data_train.iloc[:, 2:423].drop('SalePrice', 1)
        sp_train = self.sales_price_train
        linear_regression_all_price.fit(all_train, sp_train)
        # print("The nv vs price linear regression coefs are {0} and inter is {1}".format(linear_regression_all_price.coef_,
        # linear_regression_all_price.intercept_))
        all_vali = self.data_validation.iloc[:, 2:423].drop('SalePrice', 1)
        sp_vali = self.sales_price_validation
        test_all = self.data_test.iloc[:,2:423].drop('SalePrice',1)
        mse = mean_squared_error(y_true=sp_vali, y_pred=linear_regression_all_price.predict(all_vali))
        rmse = mse ** (0.5)
        test_mse = mean_squared_error(y_true=self.test_sp, y_pred=linear_regression_all_price.predict(test_all))
        test_rmse = test_mse **(0.5)
        print('The root mean square error of the all linear regression is {0}'.format(test_rmse))

    def lasso_all_sp(self):

        all_train = self.data_train.iloc[:, 2:423].drop('SalePrice', 1)
        sp_train = self.sales_price_train
        all_vali = self.data_validation.iloc[:, 2:423].drop('SalePrice', 1)
        sp_vali = self.sales_price_validation
        all_test = self.data_test.iloc[:, 2:423].drop('SalePrice', 1)
        # rmses = []
        # for alpha in range(50, 510):
        #     lasso_all_sp = linear_model.Lasso(alpha=alpha, normalize=True)
        #     lasso_all_sp.fit(all_train, sp_train)
        #     mse = mean_squared_error(y_true=sp_vali, y_pred=lasso_all_sp.predict(all_vali))
        #     rmse = mse ** (0.5)
        #     rmses.append(rmse)
        # alpha = [_ for _ in range(50, 501)]
        # plt.scatter(alpha, rmses)
        # plt.show()
        lasso_all_sp = linear_model.Lasso(alpha=50, normalize=True)
        lasso_all_sp.fit(all_train, sp_train)
        test_mse = mean_squared_error(y_true=self.test_sp, y_pred=lasso_all_sp.predict(all_test))
        test_rmse = test_mse ** (0.5)
        print(test_rmse)

if __name__ == '__main__':
    bhp = bostonHousingPrice()
    bhp.linear_regression_gla_price()
    bhp.linear_regression_all_price()
    bhp.lasso_all_sp()
    # bhp.linear_regression_nv_price()
    # bhp.scatter_gla_price()
    # bhp.plot_scatter_and_linear_regression()
    # bhp.scatter_gla_price()
    # bhp.normailize_numerical_variable()
